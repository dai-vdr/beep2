#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_PREREQ(2.59)
AC_INIT([beep2], 1.3, [shingo@kip.iis.toyama-u.ac.jp])

# OSTYPE
AC_CANONICAL_SYSTEM

# automake
AM_INIT_AUTOMAKE($PACKAGE_NAME, $PACKAGE_VERSION, no-define)

AC_CONFIG_SRCDIR([src/beep.c])
AC_CONFIG_HEADER([config.h])

# Checks for programs.
AC_PROG_CXX
AC_PROG_CC
AC_PROG_INSTALL

# Checks for libraries.

# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS([stdlib.h string.h syslog.h unistd.h])
#
#AC_CHECK_HEADERS([stdio.h stdlib.h unistd.h])
#AC_CHECK_HEADERS([stdio.h stdlib.h unistd.h pwd.h sys/types.h syslog.h])
#AC_CHECK_HEADERS([stdio.h stdlib.h unistd.h ctype.h])
#AC_CHECK_HEADERS([stdio.h ctype.h])
#AC_CHECK_HEADERS([stdio.h ctype.h])
#AC_CHECK_HEADERS([string.h])
#AC_CHECK_HEADERS([stdio.h])
#AC_CHECK_HEADERS([stdio.h])
AC_CHECK_HEADERS([stdio.h pwd.h sys/types.h syslog.h ctype.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_TYPE_UID_T

# Checks for library functions.
AC_FUNC_MALLOC

# output device
AC_ARG_WITH(output-device,
	 [[  --with-output-device=/foo	output device /foo [/dev/console]]])

if test "x$with_output_device" = "x" ; then
	OUTPUT_DEVICE=/dev/console
else
	OUTPUT_DEVICE="$with_output_device"
fi
AC_SUBST(OUTPUT_DEVICE)
AC_DEFINE_UNQUOTED(OUTPUT_DEVICE, "$OUTPUT_DEVICE",[Output device])

# syslog
AC_MSG_CHECKING([whether to build support for the system logging])
AC_ARG_ENABLE([syslog],
	[  --disable-syslog	disable system logging],
	[SYSTEM_LOGGING=no], [SYSTEM_LOGGING=yes])
AC_MSG_RESULT([$SYSTEM_LOGGING])
if test "x$SYSTEM_LOGGING" = "xyes"; then
	SYSTEM_LOGGING="-DSYSTEM_LOGGING"
else
	SYSTEM_LOGGING=
fi
AC_SUBST([SYSTEM_LOGGING])

# FreeBSD
case $target_os in
	*bsd*) OSTYPE_BSD="-DOSTYPE_BSD" ;;
esac
AC_SUBST([OSTYPE_BSD])

AC_CONFIG_FILES([Makefile
                 src/Makefile
                 man/Makefile
                 man/en/Makefile
                 man/ja/Makefile])
AC_OUTPUT
